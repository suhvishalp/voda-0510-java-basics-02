
10 - 11.15 / 11.30  - Session 1         - introduce new concepts

11.45 - 1.00        - Session 2         - continued discussions / demos on the topic of the day 

2.00 to 04.00       - session 3         - assignments / demos / self-study / practice / read 

4.00 to 06.00       - session 4         - q&a, project work



VM - 
Environment Setup 
---------------------
    - java 12
    - spring tool suite
    - node 
    - VS Code 
    - mysql community edition + mysql workbench (root)
    - docker 


Language                        Library                             Framework 

Java                            standard libraries                  Spring Framework
                                i.e. lang, io, jdbc, etc.
                                log4j, gson, junit, 


Python                          NumPy, Pandas                       Django, Flask

C/C++                           stdio.h, conio.h                    ...

JavaScript / TypeScript         JQuery, React                       NextJS, Angular, NuxtJS, NestJS

GoLang                          ----

C#/VB                           ---

    |                               |                                   |
programming                     Simply the tasks                    standardise the process 
capabilities     



NodeJS
    - execution env for js code 


Testing tools / libraries 

Package managers / Build tools
    - maven
    - gradle 

CICD tools 
    - jenkins 

VCS Tools 
    - git 
    - gitlab 




Java 
----------

    .java ----> java compiler -----------------------> .class 
                converts your javacode into ByteCode


    - ByteCode is understandable only to JVM

    JVM - Java Virtual Machine 
        - responsible to execute the bytecode on the given platform 

    JRE - Java Runtime Environment
        - JVM + standard libraries 

    JDK - Java Development Kit 
        - JRE + development tools i.e. javac, jar, etc. 


========================
Explore: 1. JVM Architecture 
            - Class Loader in JVM 
                    - loading, linking, initialization 
            - execution engine 

         2. Garbadge Collection 
            https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/gc01/index.html#t2

         3. Naming Conventions 
            https://www.oracle.com/java/technologies/javase/codeconventions-introduction.html

        4. Data types, operators in java 

========================


    Java is a object oriented programming language 




    - Variables in java 
        - store values 

        1. Local Variables 
                - declared inside a method, constructor  
                - don't have default values, must be initialized before its use 
                - memory for all the local variables will be allocated when the method is invoked, and the detroyed when the method finishes its execution 


        2. Instance Variables 
                - declared inside a class, (outside methods)
                - whenever a new object is created (using 'new' keyword), memory for all the instance 
                    variables will be allocated, destroyed when the object is deleted 
                - instance variables have default values 
                    - i.e. for numbers = 0
                        for booleans = false 
                        for reference types = null 
                - we can use the access modifiers i.e. public, private, protected, default 

                        - defualt - the members will be accessible anywhere within the same 'package'
                        - public - accessible everywhere 
                        - private - accessible only within the class 
                        - protected - accessible only within the class and the subclass 

        3. Static Variables 
                - declared inside a class, using the 'static' keyword
                - only 1 copy of static variable will be allocated per class 
                - when the class is loaded, memory for static variables will be allocated 
                - define the accessiblity using the modifiers i.e. public, private, protected 


Garbadge Collection 
    - removes the unreferenced objects from the memory 


    static keyword 
        - static variables 

        - static methods 

        - static class 

    final keyword 
        - final variables
            - a final variable is constant variables, once the value is assigned you cannot change it  

        - final methods 
            - a final method cannot be overridden in its subclass 

        - final class 
            - a final class cannot be subclassed 


    Java Keyboard inputs 
    ------------------------

            1. using Scanner class 

            2. using IO classes 

            3. using Console class 



    Data types 
    ----------------
        primitive data types 
            - hold / represent values directly 

                byte        1 byte              -128 to 127

                short       2 bytes             ..

                int         4 bytes             ..

                long        8 bytes 

                float       4 bytes 

                double      8 bytes 

                char        1 byte 

                boolean     1 bit

        Refernece types 
            - all the class, interface, enums type variables are called reference types 
            - stores ref to the memory 

                String str; 
                Employee employee;


        Wrapper classes 
        --------------------
            - for each primitive type i.e. int, char etc. there is a corresponding reference type available i.e. Integer, Character 


                    byte                Byte 
                    short               Short 
                    int                 Integer 
                    long                Long 
                    float               Float 
                    double              Double 
                    char                Character 
                    boolean             Boolean 

            - wrapper classes provide various methods to perform typecasting, and a few operations 





    Common terms 
    -------------------------------------------

        POJO - plain old java object 
            - ordinary java classes 
            - simple class 
            - a class that doesn't 
                - extend to any other class 
                - contain any annotations 
                - implement any interface 


                public class Employee {

                }

        Java Beans 
            - it is special pojo class that has below requirements 
                - implements serializable 
                - all properties / instance variables are defined as private 
                - public getter/setter methods 
                - has a no-arg constructor 

            public class Employee implements serializable {

            }

        VO - value object 


        BO - Business object 
            - classes that represent business entities 

        SO - Service object 
            - classes represents code to perform some business operations 
            - business logic 

        DAO - Data access object    
            - classes represents code to perform db operations 
            - 

        DTO - Data transfer object 
            - used to represent the structure of data usually exchanged between client-servers 


        


        Spring Beans 


   ------------------------------------------- 



    Control statements 
        - if 

            if(boolean_expression){

            }

        - if - else 

            if(boolean_expression1){
                
            }else {

            }

            

        - if - else if - else 

            if(boolean_expression){
                
            }else if(boolean_expression2){

            }
            ..
            ..
            ..
            else {

            }


        - switch case statement 

            switch(expression){     //expression that evaluates to byte, short, int, char, or string 

                case constant1: 
                    statements;
                    statements;
                    break;

                case constant2: 
                    statements;
                    statements;
                    break;

                case constant3:
                    statements;
                    statements;
                    break;
                ..

                ..

                default :
                    statements;
                    statements;
                   
            }


    Looping statements 
        - while 
        - do while 
        - for 
        - enhanced for loop 

     



    Array 
    ---------
        - used to store fixed number of elements 
        - the size of array is fixed 
        - in java Array is an object 

        a. declare an array variable 

                <<data-type>>[] arr-var-name;
                int[] numbers;
                short[] nums;
                String[] names;
                double 

                String[] names;
                String [] names;
                String []names;
                String names[];


        b. create array object 

                arr-var-name = new <data-type>[size];
                numbers = new int[5];


        c. initialize values 

                numbers[0] = 10;
                numbers[1] = 20;
                numbers[2] = 30;


        int[] numbers = new int[5];

        int[] numbers = new int[] {21,54,34,54,76,45};




      java.util.Arrays class 
      -----------------------------
        - This class contains various methods for manipulating arrays (such as sorting and searching). This class also contains a static factory that allows arrays to be viewed as lists.


    Java OOPS 
    ----------------

        Encapsulation 
            - binding data & logic together 

        Abstraction 
            - hiding the complexities from outside world 
            - hide unnecessary details from the outside world 

        Inheritance 
            - a class can be derived from another class 
            - the members of the parent class are inherited by the child class 
            - reusability 
            - maintainability 
            - extendibility 

                        class Person {
                            String name;
                            int age; 
                            Date DOB; 
                            ...
                            //
                            //

                            //
                        } 

                        class Employee extends Person {
                            int empId;
                            double salary;
                        }

        Polymorphism 
            - many forms of the same interface depending on the type of object the variable is pointint to 

            

                        class Car {
                            //
                            //
                            //
                            //
                            //
                            public void move(){
                                //
                            }
                        }

                        class BMWCar extends Car{
                            //override
                            public void move(){
                                //child specific behavior of move method
                            }
                        }

                        class MercedesCar extends Car {
                            //override
                            public void move(){
                                //child specific behavior of move method
                            }
                        }


                        Car car = null;



        Class 
        --------
            - a class is a user defined data type 
            - a class is a blueprint for objects 
            - ecapsulate data and logic together 


        Object 
        --------
            - an object is an instance of a class 
            - using 'new' keyword we can create an object of a class 


            class Customer {

                //static variable 
                //final variables 
                //instance variables 

                //constructors 

                //instance methods

                //abstract methods  
            
                //inner class 
            }

            class Product {

            }

            class Employee {

            }


    Constructor 
    -------------
        - special function / method which has the same name as the class 
        - this function is invoked only once, whenever the object of this class is created 
        - used to initialize values for instance members 
        - a class can have multiple constructors, 
            - class should have at least a no-arg constructor 
        

        this keyword 
        --------------
            - this() constructor 
                - it is used to invoke another constructor whithin the same class 
                - call this 'this()' constructor must be the first line 

            - this 
                - used to access the members of the same class 


    ========================
    Explore: 
        - private constructors and its usage 
            - https://www.baeldung.com/java-private-constructors

        - factory methods in java 
            - 

        - method overloading in java 


    ==========================




        public class Employee {

            private int empId;
            private String name;

            public Employee(){      //constructor 

            }

            public Employee(int id, int name){
                this.empId = id;
                this.name  = name;
            }

        }


    a Proper encapsulated class / tightly encapsulated class 
        - when a class has all instance variables defined as private 
            and accessible through the getter/setters only 


    Method Overloading 
    --------------------
        - a class can contain multiple methods with the same name but the parameteres should be diff 
        - compile time Polymorphism / static binding 


    Object class 
    -------------------
        - Object class is by default a super most class for all the classes in java 
        - everyclass is exclusively subclass of object class 

            Object class methods
            ---------------------
                - int hashCode()
                - boolean equals(Object o)
                - String toString() 




                                Object 
                                  |
        ------------------------------------------------------------------------------
        Student                 System          ArrayList           Scanner         ..
        Employee                                LinkedList
        CustomClass...


    Overriding the toString() method 
    ----------------------------------
        - Returns a string representation of the object. In general, the toString method returns a string that "textually represents" this object.
        - It is recommended that all subclasses override this method.
        - whenever we use the ref variable in an expression, by default it calls the toString() on that object 

    Overriding the equals() method 
    -------------------------------------
        - you can override equals() method to provide logic to compare two objects of same type 
        

        **equals() contract 

        Student student = new Student();

        Object object = new Student();        //valid


    **a variable of parent class can reference to an object of clild class 



    Enumerator, Iterator, ListIterator  
    -------------------------------------



    Method Overriding 
    -------------------





   